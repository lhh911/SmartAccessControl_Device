package com.xsjqzt.module_main.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xsjqzt.module_main.greendao.entity.OpenCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPEN_CODE".
*/
public class OpenCodeDao extends AbstractDao<OpenCode, Long> {

    public static final String TABLENAME = "OPEN_CODE";

    /**
     * Properties of entity OpenCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, int.class, "sid", false, "SID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Update_time = new Property(3, int.class, "update_time", false, "UPDATE_TIME");
        public final static Property Expiry_time = new Property(4, int.class, "expiry_time", false, "EXPIRY_TIME");
        public final static Property User_id = new Property(5, int.class, "user_id", false, "USER_ID");
    }


    public OpenCodeDao(DaoConfig config) {
        super(config);
    }
    
    public OpenCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPEN_CODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" INTEGER NOT NULL ," + // 1: sid
                "\"CODE\" TEXT NOT NULL UNIQUE ," + // 2: code
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 3: update_time
                "\"EXPIRY_TIME\" INTEGER NOT NULL ," + // 4: expiry_time
                "\"USER_ID\" INTEGER NOT NULL );"); // 5: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPEN_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OpenCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSid());
        stmt.bindString(3, entity.getCode());
        stmt.bindLong(4, entity.getUpdate_time());
        stmt.bindLong(5, entity.getExpiry_time());
        stmt.bindLong(6, entity.getUser_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OpenCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSid());
        stmt.bindString(3, entity.getCode());
        stmt.bindLong(4, entity.getUpdate_time());
        stmt.bindLong(5, entity.getExpiry_time());
        stmt.bindLong(6, entity.getUser_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OpenCode readEntity(Cursor cursor, int offset) {
        OpenCode entity = new OpenCode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // sid
            cursor.getString(offset + 2), // code
            cursor.getInt(offset + 3), // update_time
            cursor.getInt(offset + 4), // expiry_time
            cursor.getInt(offset + 5) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OpenCode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.getInt(offset + 1));
        entity.setCode(cursor.getString(offset + 2));
        entity.setUpdate_time(cursor.getInt(offset + 3));
        entity.setExpiry_time(cursor.getInt(offset + 4));
        entity.setUser_id(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OpenCode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OpenCode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OpenCode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
